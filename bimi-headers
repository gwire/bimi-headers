#!/usr/bin/env python3

## PoC implementation of BIMI draft
##    https://www.ietf.org/archive/id/draft-brand-indicators-for-message-identification-05.html#name-receiver-actions
##    https://www.ietf.org/archive/id/draft-fetch-validation-vmc-wchuang-06.html
##
## Note that this is written to be compatible with python3 packages available for Ubuntu LTS 20.04
##  once a working verison is done, it may be refactored to use newer python packages
##
## TODO:
## - svg validation
## - handle http errors

import sys
import logging
import argparse
import base64
import email
from email.header import Header
import textwrap
import hashlib
import gzip
import re
import requests
from urllib.request import urlopen
from urllib.parse import urlparse
import datetime

import pem
from OpenSSL import crypto

from pyasn1.codec.der.decoder import decode as asn_decode
from pyasn1.type import univ, char, tag, namedtype, namedval, opentype, constraint

from importlib.metadata import version
from pathlib import Path

import dns.resolver
from publicsuffix2 import PublicSuffixList, get_public_suffix

from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.x509 import DNSName, load_pem_x509_certificate

parser = argparse.ArgumentParser(
        prog='bimi-headers',
        description='Generate BIMI email headers for a given domain',
        epilog='A successful pass result for DMARC is assumed.')
parser.add_argument("domain", help="The author domain")
parser.add_argument("--selector", help="The selector (default: default)", default="default")
parser.add_argument("--authserv-id", help="Authetication-Results authserv-id (default: mailserver.local)", default="mailserver.local")
parser.add_argument("--status-only", action='store_true', help="Only return the auth result", default=False)
parser.add_argument("--bimi-auth-only", action='store_true', help="Only return the unwrapped bimi content of Authentication-Results", default=False)
parser.add_argument("--auth-only", action='store_true', help="Only return the content of Authentication-Results", default=False)
parser.add_argument("--indicator-only", action='store_true', help="Only return the content of BIMI-Indicator", default=False)
parser.add_argument("--location-only", action='store_true', help="Only return the content of BIMI-Location", default=False)
parser.add_argument("--wrap", help="Mail header wrap style (default: space)", choices=['space','tab','none'], default='space')
parser.add_argument("--cache-dir", help="File cache directory (default: /tmp)", default='/tmp')
parser.add_argument("--debug", action='store_true', help="Show debug", default=False)
args= parser.parse_args()

vmc_root = [
    "https://bimigroup.org/certs/digicert.pem",
    "https://bimigroup.org/certs/entrust_vmc_specific.pem"
    ]

if args.debug:
    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)

## https://stackoverflow.com/questions/11887762/how-do-i-compare-version-numbers-in-python
def versiontuple(v):
    return tuple(map(int, (v.split("."))))

def get_org_domain(domain):
    """
    Given a domain, return the organsational domain
    e.g. for mail.foo.bar.co.uk return bar.co.uk
    """
    psl = PublicSuffixList()
    org_domain = psl.get_public_suffix(domain, strict=True)
    return(org_domain)

def is_public_hostname(hostname):
    ## TODO: check for NS?
    psl = PublicSuffixList()
    if psl.get_public_suffix(hostname, strict=True):
        return(True)
    else:
        logging.debug('DNS: %s not in publicsuffixlist',domain)
        return(False)

def is_valid_tinysvg(svg):
    ## TODO:
    return(True)

def is_gzip(bytes):
    if bytes[:2] == b'\x1f\x8b':
        return(True)
    return(False)

def gunzip(bytes):
    if bytes[:2] == b'\x1f\x8b':
        return(gzip.decompress(bytes))
    else:
        return(bytes)

def get_root_certs(vmc_root):
    """
    Download the approved MVC root certificates
    Return a list of byte objects
    """
    cache_file = args.cache_dir + "/bimi_root.pem"
    if not Path(cache_file).is_file():
        for url in vmc_root:
            ## TODO: deal with not-200 response
            r = requests.get(url, timeout=10, verify=True)
            downloaded_pem = r.content
            with open(cache_file, 'ab') as file:
                file.write(downloaded_pem)
                file.close()
    if Path(cache_file).is_file():

        ## we're using cryptography 2.8 which can't load multiple certs at once
        ## we need to break the pem up into an array of certs
        ## the pem module is useful but assumes it is a file on disk
        _c_certs = pem.parse_file(cache_file)
        certs = list()
        for _c_cert in _c_certs:
            certs.append(_c_cert.as_bytes())

        return(certs)
    return(False)

def get_l_auth(domain,selector,url):
    if not url.startswith("https://"):
        return(False)
    cache_file = args.cache_dir + "/bimi_auth_" + domain + "_" + selector + ".svg"
    if Path(cache_file).is_file():
        with open(cache_file, 'rb') as file:
            downloaded_svg = file.read()
            file.close()
        return(downloaded_svg)
    else:
        return(False)

def get_l(domain,selector,url):
    if not url.startswith("https://"):
        return(False)
    cache_file = args.cache_dir + "/bimi_" + domain + "_" + selector + ".svg"
    if Path(cache_file).is_file():
        with open(cache_file, 'rb') as file:
            downloaded_svg = file.read()
            file.close()
    else:
        r = requests.get(url, timeout=10, verify=True)
        downloaded_svg = gunzip(r.content)
        if len(downloaded_svg) > 32768:
            return(False)
        with open(cache_file, 'wb') as file:
            file.write(downloaded_svg)
            file.close()
    return(downloaded_svg)

def get_bimi_certs(domain,selector,url):
    """
    Returns a list of byte objects
    """
    if not url.startswith("https://"):
        return(False)
    cache_file = args.cache_dir + "/bimi_" + domain + "_" + selector + ".pem"
    if not Path(cache_file).is_file():
        r = requests.get(url, timeout=10, verify=True)
        ## TODO: try/except download issues
        downloaded_pem = r.content
        with open(cache_file, 'wb') as file:
            file.write(downloaded_pem)
            file.close()
    if Path(cache_file).is_file():
        with open(cache_file, 'rb') as file:
            downloaded_pem = file.read()
            file.close()

        ## we're using cryptography 2.8 which can't load multiple certs at once
        ## we need to break the pem up into an array of certs
        ## the pem module is useful but assumes it is a file on disk
        _c_certs = pem.parse_file(cache_file)
        certs = list()
        for _c_cert in _c_certs:
            certs.append(_c_cert.as_bytes())

        return(certs)
    return(False)

def validate_bimi_cert(domain,selector,certs,root_certs):
    """
    Returns "pass" for validation, and "fail" otherwise
    """
    org_domain = get_org_domain(domain)
    ## this list is draft-fetch-validation-vmc-wchuang 4.3
    valid_names = [ domain, get_org_domain(domain), selector + "._bimi." + domain, "default._bimi." + domain ]
    ## the image is probably in the first cert, but might not be

    intermediate_certs = []
    subject_cert = False

    for pem in certs:
        name_match = False

        cert = x509.load_pem_x509_certificate(pem,default_backend())

        for ext in cert.extensions:
            ## 2.5.29.17 subjectAltName
            if "2.5.29.17" == ext.oid.dotted_string:
                alt_names = ext.value.get_values_for_type(x509.DNSName)
                logging.debug('subjectAltName: %s',','.join(alt_names))
                if any(name in alt_names for name in valid_names):
                    name_match = cert.serial_number
        if name_match:
            for ext in cert.extensions:
                ## "1.3.6.1.5.5.7.1.12" logotype
                if "1.3.6.1.5.5.7.1.12" == ext.oid.dotted_string:
                    asn, _ = asn_decode(ext.value.value, asn1Spec=LogotypeExtn())
                    ## I think its correct to assume one image
                    image_details = asn['subjectLogo']['direct']['image'][0]["imageDetails"]
                    if not image_details['mediaType'] == "image/svg+xml":
                        logging.debug('mediaType is not image/svg+xml')
                        pass
                    else:
                        logging.debug('image_details: %s',image_details)
                        image_uri = image_details["logotypeURI"][0].__str__()
                        ## check if data
                        with urlopen(image_uri) as response:
                            tmp_image_file = response.read()
                        if not is_gzip(tmp_image_file):
                            logging.debug('image is not gzipped')
                            pass
                        tmp_image_file = gunzip(tmp_image_file)
                        subject_cert = pem
        if not name_match:
            intermediate_certs.append(pem)

    ## pyopenssl 19 doesn't support intermediate certificates, and cryptography 2.8 has
    ## no chain validation at all
    ## so, as a workaroud, we validate the indermediate certificates against the root
    ## and temporarily add them to the root
    if tmp_image_file:
        try:
            root_store = crypto.X509Store()
            for p in get_root_certs(root_certs):
                c = x509.load_pem_x509_certificate(p,default_backend())
                root_store.add_cert(crypto.X509.from_cryptography(c))
            for p in intermediate_certs:
                c = x509.load_pem_x509_certificate(p,default_backend())
                test_intermediate = crypto.X509.from_cryptography(c)
                store_ctx = crypto.X509StoreContext(root_store, test_intermediate)
                if store_ctx.verify_certificate() == None:
                    root_store.add_cert(test_intermediate)
            test_cert = crypto.load_certificate(crypto.FILETYPE_PEM,subject_cert)
            store_ctx = crypto.X509StoreContext(root_store, test_cert)
            if store_ctx.verify_certificate() == None:
                logging.debug("verified certificate")
                cache_file = args.cache_dir + "/bimi_auth_" + domain + "_" + selector + ".svg"
                with open(cache_file, 'wb') as file:
                    file.write(tmp_image_file)
                    file.close()
                return("pass")
        except Exception as e:
            print(e)
    return("fail")

### A number of classes to implent the minimum ASN.1 for
### validating logotype
###  https://www.rfc-editor.org/rfc/rfc3709.html

algorithmIdentifierMap = {}
MAX = float('inf')

class AlgorithmIdentifier(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('algorithm', univ.ObjectIdentifier()),
        namedtype.OptionalNamedType('parameters', univ.Any(),
            openType=opentype.OpenType('algorithm', algorithmIdentifierMap)
            )
        )

class HashAlgAndValue(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('hashAlg', AlgorithmIdentifier()),
        namedtype.NamedType('hashValue', univ.OctetString())
        )

class LogotypeDetails(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType(
            'mediaType',
            char.IA5String()
            ),
        namedtype.NamedType(
            'logotypeHash',
            univ.SequenceOf(
                componentType=HashAlgAndValue()).subtype(
                    sizeSpec=constraint.ValueSizeConstraint(1, MAX)
                )
            ),
        namedtype.NamedType(
            'logotypeURI',
            univ.SequenceOf(
                componentType=char.IA5String()).subtype(
                    sizeSpec=constraint.ValueSizeConstraint(1, MAX)
                )
            )
        )

class LogotypeImage(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType(
            'imageDetails',
            LogotypeDetails()
            ),
        )

class LogotypeData(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.OptionalNamedType(
            'image', univ.SequenceOf(componentType=LogotypeImage())
            )
        )

class LogotypeInfo(univ.Choice):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType(
            'direct',
            LogotypeData().subtype(
                implicitTag=tag.Tag(tag.tagClassContext,tag.tagFormatConstructed, 0)
                )
            )
        )

class LogotypeExtn(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.OptionalNamedType(
            'subjectLogo',
            LogotypeInfo().subtype(
                explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)
                )
            )
        )


def tag_value(tagval_string):
    """
    Turn DKIM-style TXT records into dict of strings
    """
    txt_config = tagval_string.decode("utf-8").split(";")
    txt_config = [item for item in txt_config if "=" in item]
    d = dict(bytes(value,'utf-8').strip().split(b'=',1) for value in txt_config)
    d = { k.decode("utf-8") : v.decode("utf-8") for k,v in d.items() }
    return(d)

def dmarc_policy(domain):
    """
    Return a DMARC policy as a normalised dict
    """
    if not is_public_hostname(domain):
        return(False)
    try:
        if versiontuple(version('dnspython')) < versiontuple("2.0.0"):
            answers = dns.resolver.query('_dmarc.' + domain, 'TXT', raise_on_no_answer=False)
        else:
            answers = dns.resolver.resolve('_dmarc.' + domain, 'TXT', raise_on_no_answer=False)
        for rdata in answers:
            for txt_string in rdata.strings:
                if txt_string.decode("utf-8").startswith("v=DMARC1"):
                    d = tag_value(txt_string)
                    if not "pct" in d:
                        d["pct"] = "100"
                    if not "sp" in d:
                        d["sp"] = d.get("p")
                    return(d)
    except (dns.resolver.NXDOMAIN, dns.resolver.NoNameservers, dns.resolver.Timeout) as e:
        logging.debug('DMARC: DNS error requesting _dmarc.%s',domain)
        return(False)
    return(False)

def bimi_assert(domain,selector):
    """
    Return a normalised BIMI policy as a dict
    """
    org_domain = get_org_domain(domain)
    try:
        if versiontuple(version('dnspython')) < versiontuple("2.0.0"):
            answers = dns.resolver.query(selector + '._bimi.' + domain, 'TXT', raise_on_no_answer=False)
        else:
            answers = dns.resolver.resolve(selector + '._bimi.' + domain, 'TXT', raise_on_no_answer=False)
        for rdata in answers:
            for txt_string in rdata.strings:
                if txt_string.decode("utf-8").startswith("v=BIMI1"):
                    d = tag_value(txt_string)
                    if not "a" in d:
                        d["a"] = ""
                    if not "l" in d:
                        d["l"] = ""
                    return(d)
        if org_domain.casefold() == domain.casefold():
            logging.debug('BIMI: No record for %s',selector + '._bimi.' + domain)
            return(False)
        else:
            logging.debug('BIMI: No record for %s',selector + '._bimi.' + domain)
            return(bimi_assert(org_domain,selector))
    except (dns.resolver.NXDOMAIN, dns.resolver.NoNameservers, dns.resolver.Timeout) as e:
        if org_domain.casefold() != domain.casefold():
            logging.debug('BIMI:DNS error for %s',selector + '._bimi.' + domain)
            return(bimi_assert(org_domain,selector))
    return(False)

def qualifying_policy(domain):
    """
    Returns bool to indicate if a BIMI policy should be checked
    """
    org_domain = get_org_domain(domain)
    policy = dmarc_policy(domain)
    if policy:
        if policy.get("p") not in ["none"]:
            if policy.get("sp") not in ["none"]:
                if policy.get("p") in ["quarantine"]: ## should be "quarantine", "reject'?
                    if policy.get("pct") not in ["100"]:
                        logging.debug('DMARC: pct=%s',policy.get("pct"))
                        return(False)
                if org_domain.casefold() == domain.casefold():
                    return(True)
            else:
                logging.debug('DMARC: sp=none for %s', domain)
                return(False)
        else:
            logging.debug('DMARC: p=none for %s', domain)
            return(False)
    else:
        if org_domain.casefold() != domain.casefold():
            if qualifying_policy(org_domain):
                return(True)
    if org_domain.casefold() != domain.casefold():
        if qualifying_policy(org_domain):
            return(True)
    logging.debug('DMARC: no record for _dmarc.%s', domain)
    return(False)

def wrap_header(label,data,wrap):
    """
    Wrap mail headers with a space, a tab, or no wrapping
    """
    if wrap == "none":
        return(data)
    if label == "BIMI-Indicator: ":
        data = b64_wrap(label,data)
    else:
        data = Header(data,maxlinelen=78,header_name=label).encode()
    if wrap == "tab":
        data = tab_lines(data)
    return(data)

def b64_wrap(label,b64_str):
    """
    Mail tools don't know how to wrap a raw b64 blob
    """
    data = '\n'.join(textwrap.wrap(label + b64_str, width=77, initial_indent='', subsequent_indent=' '))
    data = data[len(label):]
    return(data)

def tab_lines(headers):
    """
    Replaces the leading space with a hard tab
    """
    out = ''
    sp = iter(headers.splitlines())
    if sp == '':
        return(x)
    for x in sp:
        if x[0] == " ":
            out = out + "\t" + x[1:] + "\n"
        else:
            out = out + x + "\n"
    return out[:-1]

def main():
    bimi_result="temperror"
    bimi_comment=""
    policy_authority="none"
    bimi_logo_file=False
    bimi_auth_file=False
    bimi_indicator=False
    bimi_location=False
    indicator_hash=False
    b=False

    if not qualifying_policy(args.domain):
        bimi_result = "skipped"
        bimi_comment = " (DMARC requirements unmet)"
    else:
        b = bimi_assert(args.domain,args.selector)
        if not b:
            bimi_result = "none"
            if args.location_only:
                sys.exit(1)
        else:
            bimi_location = wrap_header("BIMI-Location: ","v=BIMI1; l=" + b.get("l") + "; a=" + b.get("a"),args.wrap)
            if args.location_only:
                print(bimi_location)
                sys.exit(0)
            if len(b.get("l")) == 0:
                bimi_result = "declined"
            else:
                if b.get("a"):
                    ## check for previous positive authentication
                    bimi_logo_file = get_l_auth(args.domain,args.selector,b.get("l"))
                    if bimi_logo_file:
                        bimi_result = "pass"
                        policy_authority = "pass"
                if not bimi_logo_file:
                    bimi_logo_file = get_l(args.domain,args.selector,b.get("l"))
                    if bimi_logo_file:
                        bimi_result = "pass"
                        if b.get("a"):
                            downloaded_certs = get_bimi_certs(args.domain,args.selector,b.get("a"))
                            policy_authority = validate_bimi_cert(args.domain,args.selector,downloaded_certs,vmc_root)
                    else:
                        bimi_result = "fail"
                        bimi_comment = " (problem downloading logo)"

    if bimi_logo_file:
        bimi_indicator = wrap_header("BIMI-Indicator: ",base64.b64encode(bimi_logo_file).decode('utf-8'),args.wrap)
        indicator_hash=hashlib.sha256(bimi_logo_file).hexdigest()[-8:]

    if args.status_only:
        print(bimi_result)
        return(True)

    if args.indicator_only:
        if not bimi_logo_file:
            return(False)
        else:
            print(bimi_indicator)
            return(True)

    auth_results = "; bimi=" + bimi_result + bimi_comment + " header.d=" + args.domain
    if not bimi_result == "skipped":
        auth_results = auth_results + " header.selector=" + args.selector
    if bimi_logo_file:
        auth_results = auth_results + " policy.authority=" + policy_authority
        if indicator_hash:
            auth_results = auth_results + " policy.indicator-hash=" + indicator_hash

    if args.bimi_auth_only:
        print(auth_results)
        return(True)

    auth_results_full = wrap_header("Authentication-Results: ",args.authserv_id + auth_results,args.wrap)

    if args.auth_only:
        print(auth_results_full)
        return(True)

    if bimi_indicator:
        print("BIMI-Indicator: " + bimi_indicator)
    if bimi_location:
        print("BIMI-Location: " + bimi_location)
    print("Authentication-Results: " + auth_results_full)


if __name__ == '__main__':
    main()
sys.exit(0)
